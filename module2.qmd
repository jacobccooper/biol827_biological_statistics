---
title: "Module 2"
author: "UNK Biology"
---

# Learning objectives:

To continue gaining familiarity with the R statistical framework by using *RStudio* to:

-   Create new variables from existing variables

-   Calculate simple descriptive statistics

-   Install and activate add-on *R* packages

-   Use an add-on *R* package to calculate descriptive statistics

# Datasets:

We will be working with another fictional dataset. These data were created at random to illustrate *R* tasks. Any patterns in these data are random and unintentional. The dataset is available as a comma-separated values (`.csv`) file in *Canvas*.

## Dataset

A researcher was conducting an exercise physiology study. The research team wanted to know whether volunteers of different sexes (female, male, non-binary) differed in physical characteristics, especially Body Mass Index (BMI). For each volunteer, the research team recorded their weight (in kilograms, kg) and height (in meters, m) of each participant.

-   BIOL827.02_Problem_Set_Data.csv

# Procedure:

1.  Watch **Module 2: Manipulating and Describing Data in *R*** for a walk-through of these initial procedures.
2.  Open a new *R* script in the source pane by clicking on `File menu > New File > R Script`. If so desired, you can also select `Rmarkdown` to create an `rmarkdown` script instead. **Save your script frequently as you work through the problem set (`File menu > Save` or CTRL + S** \[Windows\] **or CMD + S** \[Mac\]**).**
3.  If necessary, clear the environment and plots panes of your previous work by clicking the broom icon at the top of both panes and clear the console by clicking on `Edit menu > Clear Console`. You can also hit CTRL + L (all operating systems).
4.  Set your working directory and import the dataset. Review Module 1 Problem Set procedures as necessary to complete these tasks.
    -   I imported the dataset as a dataframe named ‘Data’.

*Note* that I show this intro of loading the file and packages here, but these steps may not be shown in future modules. Below, I use `tidyverse`. If you do not have `tidyverse`, you will have to run `install.packages("tidyverse")` on your machine. This command only needs to be run *once*. If it asks to create a new folder or something, just say "Yes".

```{r}
# load package for data manipulation
library(tidyverse)

# where are my files?
# REMEMBER - this is for MAC!
filepath <- "~/Desktop/BIOL827/"

# load my file
# NOTE you will get a multicolored output
# this just tells you about your data
Data <- read_csv(paste0(filepath,
                        "BIOL827.02_Problem_Set_Data.csv"))
```

## A. Calculate descriptive statistics

Descriptive statistics refers to simple calculations that summarize or describe a given variable, such as the mean (i.e., average, $\mu$, $\bar{x}$), measures of variation in the data (standard deviation \[$\sigma$, $s$\], variation, etc.), and spread (minimum, maximum, range, etc.). These values are also one of the tools we can use as part of quality assurance and quality control.

5.  To calculate the mean of the `Weight.kg` variable over all sample units, use `mean(Data$Weight.kg)`. This tells *R* to calculate the mean from observations of the `Weight.kg` variable within the `Data` dataframe.

-   `mean()`: calls the mean function.

-   `Data`: this is the name of the `dataframe` in which the data to be averaged are stored.

-   `$`: separates an `object` name from the `variable` name. The named variable *must* exist within the named `object` or you will receive an error from *RStudio*.

-   `Weight.kg`: identifies the variable in `Data` from which the average is to be calculated. A variable with this name must exist within the dataframe identified.

```{r}
# view data file - first rows ONLY
head(Data)
```

```{r}
mean(Data$Weight.kg)
```

We will need to round values for our assignments.

-   `round`: rounds values to a certain number of decimal places. Format is `round(Data, decimals)`.

-   `%>%`: "is passed through". The answer from the previous command is put into the next command automatically, and does not need to be declared. This makes coding easier. `round(mean(Data$Weight.kg), 2)` is the same as `mean(Data$Weight.kg) %>% round(2)`. This helps make things easier to follow when lots of commands are used in a row.

```{r}
# round to significant figures
mean(Data$Weight.kg) %>% # get the mean
  round(2) # round to two decimals
```

6.  To calculate the standard deviation of the `Weight.kg` variable over all sample units, use `sd(Data$Weight.kg)`. The syntax is similar to the `mean()` function.

```{r}
sd(Data$Weight.kg)
```

```{r}
# round to two decimal places
sd(Data$Weight.kg) %>% 
  round(2)
```

## B. Install an R add-on package

Add-on packages only need to be installed one time. They do not need to be installed each time you open *RStudio*, but packages do have to be activated each time you open *RStudio*. Packages only need to be re-installed when the package developer releases an updated version; you will usually receive a prompt in *RStudio* if/when a package needs to be reinstalled.

The add-on package `pastecs` contains a very handy function to create a large set of descriptive statistics all at once. There are other packages that also can calculate sets of descriptive statistics, but this is the best one I have found to date. Although there is a command-line function for installing packages, this generally only needs to be done once so I prefer to use the installation wizard rather than building it into my script.

7.  Type the following into your *R* coding pane. DO NOT put this into your main coding document; your code *will not run* if it is constantly asked to install things.
8.  Enter the following text:

```{r, eval = F}
install.packages("pastecs", dependencies = TRUE)
```

-   Package must be in quotes `" "`.

-   `dependencies = TRUE` ensures any other needed packages are also installed.

9.  After running the code, you should see a lot of output in the code window. **Don't panic**. It is installing a lot. You may be prompted to install extra things or create a new folder; just say "Yes". **See below for an example output from an re-install:**

```         
trying URL 'https://cran.rstudio.com/bin/macosx/big-sur-arm64/contrib/4.4/pastecs_1.4.2.tgz'
Content type 'application/x-gzip' length 487644 bytes (476 KB)
==================================================
downloaded 476 KB


The downloaded binary packages are in
    /var/folders/gc/0jz_0k0j2qq75h6ynd6jtb_5xh27x8/T//Rtmp1kkunq/downloaded_packages
```

10. Alternatively, you an go to the "Packages" tab in the plot pane (bottom right) and find `pastecs` there for installation.

11\. Whichever method is chosen, you can check installation (and find the citation!) by typing the following:

```{r}
citation("pastecs")
```

## C. Activate an add-on package

An add-on package must be installed before it can be activated ([B. Install an R add-on package]). Although installation only needs to be done once until a major update is made, you must activate each time you open *RStudio*.

12. In the source pane, run the code `library(pastecs)`.

```{r}
library(pastecs)
```

*Note* there are `masked` warnings. This means that the computer has two commands with the same name for the same package. Imagine if you will the word "solar". In English, this pertains to things related to the sun, but in Spanish this refers to the ground or land. Thus, the computer may assume which one is meant, but this could result in a nonsensical command. Thus, if you have a conflict, you can fix it by designating the package, in this case, `English::solar` and `Spanish::solar`. We will try to let you know if a conflict like this will arise!

13. That’s it! You’ve now got all the additional functions included in this package at your fingertips. So, let’s see what it can do!

## D. Use function stat.desc to calculate descriptive statistics

A useful function provided in the `pastecs` package is `stat.desc()` which can return a large set of descriptive statistics quickly and with ease.

### D.1. Commands on a single variable

14. Enter an `object.name <-` before your `stat.desc` command. The object name can be of your choosing, this is where output from the `stat.desc()` function will be stored.

15\. Enter and run the function `stat.desc(Data$Weight.kg)`.

-   `stat.desc()`: this calls the `stat.desc` function; all arguments must be made inside these parentheses.

-   `Data`: this is the name of the existing dataframe containing the variable to be described.

-   `$Weight.kg`: indicates the variable to be summarized.

```{r}
weight_stats <- stat.desc(Data$Weight.kg)

print(weight_stats)
```

Within `stat.desc`, there are multiple options. The defaults are:

-   `basic = TRUE`: Return basic statistics on dataset size? `TRUE` = Yes.

-   `desc = TRUE`: Return basic statistics describing the data themselves? `TRUE` = Yes.

-   `norm = FALSE`: Return normal distribution statistics related to the data? Things like skewness etc. `FALSE` = No.

-   `p = 0.95`: What confidence level should we use? Default is 95%.

-   This is based on code by Frédéric Ibanez & Philippe Grosjean; type `?stat.desc` into your bottom left pane to learn more about it.

| Abbreviation | Meaning |
|----|----|
| `nbr.val` | Number of observations containing a number value. |
| `n` | Sample size. |
| `median` | Median value among all observations. Half of values are lower and half of values are higher than this value. |
| `nbr.null` | Number of empty observations mean Mean value across all observations. |
| `nrb.na` | Number of observations for which data were identified as missing (`NA`). |
| `se.mean` | Standard error relative to the mean across all observations. Interpret as `mean` $\pm$ `se.mean`. |
| `min` | Minimum value across all observations. |
| `ci.mean.0.95` | 95% confidence interval relative to the mean across all observations (i.e., margin of error). Interpret as `mean` \pm `ci.mean.0.95`. |
| `max` | Maximum value across all observations. |
| `var` | Variance across all observations. |
| `range` | Range (maximum – minimum) of values across all observations. |
| `std.dev` | Standard deviation relative to the `mean` across all observations. Interpret as `mean` $\pm$ `st.dev`. |
| `sum` | Sum of values across all observations. |
| `coef.var` | Coefficient of variation. |

Keep in mind that we also have a few different ways to define columns to be selected. For example:

```{r}
Data$Participant
```

Above we have returned the data for a single column. But what about multiple columns?

```{r}
Data %>% 
  select(Participant, Sex) # column names
```

```{r}
Data[ , c("Participant", "Sex")]
```

As we can see above, both methods subset the data similarly.

16. To view contents of the object in the console panel, highlight or type the object name and click Run or hit CTRL + Enter (Linux, Windows) or CMD + ENTER (Mac).

```{r}
weight_stats
```

17. Repeat steps 17 through 20 to run the `stat.desc` function for the `Height.m` variable

### D.2. Multiple variables in one command

We can also use `stat.desc()` to calculate descriptive statistics for more than one variable at a time.

18. Enter an `object.name <-`. The object name can be of your choosing that will store output from the `stat.desc()` function.

<!-- -->

19. Enter the function `stat.desc(Data[, c("Weight.kg", "Height.m")])`.

-   `stat.desc()`: this calls the `stat.desc` function; all arguments must be made inside these parentheses.

-   `Data`: this is the name of the existing dataframe containing the variables to be described.

-   `[, c("variable1", "variable2")]`: similar to the syntax for the `subset` function (Module 1 Problem Set), we can use hard brackets to specify a group of observations and/or variables on which to run the function. Because we want to run the function on all observations, we use a comma after the first hard bracket. Next, we can use the list function `c()` as we did with the `subset` function in Module 1 Problem Set to identify all the variables we want summarized.

20. Highlight the command and click Run. To view contents of the object in the console panel, highlight or type the object name and click Run. You can also use your keyboard shortcuts.

```{r}
multicol_stats <- stat.desc(Data[, c("Weight.kg", "Height.m")])

multicol_stats
```

### D.3. Calculate descriptive statistics for only one group of observations

We need to calculate descriptive statistics separately for each sample. There are different ways to do this in *RStudio*. This is where `tidyverse` pipelines come in handy!

In this dataset, we need to run descriptive statistics separately for each `sex` group (female, male, non-binary). Here, we will demonstrate the process for the non-binary sample.

21. Begin the command by providing an `object.name <-` for the new `dataframe` you will create. You can use an object name of your choosing.
22. We are going to use a pipeline `%>%` series of commands. These will:

-   Start with the `Data` object

-   Pass this through a `filter` command to select only certain data

    -   Remember - `==` means "is exactly equal to"

-   Pass this through a `select` command to *remove* non-numeric columns

-   Pass this through `stat.desc` to get our stats information.

23. Run the command below. To view contents of the new dataframe in the console panel, highlight or type the new dataframe name and click Run or use your shortcuts.

```{r}
Data %>%                          # start with dataset
  filter(Sex == "Female") %>%     # select females
  select(-Participant, -Sex) %>%  # remove unneeded columns
  stat.desc() %>%                 # get stats
  round(2)                        # round to two decimals
```

24. There we go! We have been able to perform a series of complicated commands quickly, right in a row, by using the pipeline method. This allows us to see things step-by-step through the command, and to annotate appropriately.
25. We can save the above as an object by adding `object.name <-` before the first `Data`.

```{r}
female_data <- Data %>%           # start with dataset
  filter(Sex == "Female") %>%     # select females
  select(-Participant, -Sex) %>%  # remove unneeded columns
  stat.desc() %>%                 # get stats
  round(2)                        # round to two decimals
```

26\. To view this, just run `female_data` or use `print(female_data)`.

## E. Create a new variable

Although the research team recorded the height and weight of each participant, they are really interested in the Body Mass Index (BMI) profile of participants. We can have *R* calculate BMI and add it to the `Data` dataframe as a new variable. There are separate formulas for calculating BMI depending on whether weight and height are in metric units or in English units; BMI will be the same from either formula. The formula for BMI calculated from weight and height in metric units is:

$$
BMI = \frac{mass}{height^2}
$$

27. In this step, how we name our new object matters! We need to tell *RStudio* the dataframe in which to put the new variable and the name we want it to give to the new variable. Enter the object name as: `Data$BMI <-`.

-   `Data`: This identifies the dataframe to which we want the new variable added; in our case, this is named `Data`.

-   `$`: Tells *R* that what comes next is the name of the new variable.

-   `BMI`: This is the name of the new variable to be added to existing dataframe `Data`.

28\. Next enter the mathematical formula (see BMI equation above) for calculating `BMI` with reference to weight and height variables in the existing dataframe `Data`: `Data$Weight.kg/(Data$Height.m^2)`.

-   This is also an example of how we can use *R* as a calculator.

-   When entering equations, it is best to always use parentheses to ensure the correct order of operations (e.g., PEDMAS). For example: BMI of participant 2:

    -   should be $\frac{125.64}{1.922^2} = \frac{125.64}{3.69} = 34.08$

    -   should ***not*** be $\frac{125.64}{1.92}^2 = 65.44^2 = 4282.07$

29\. Highlight the command and click Run.

30\. To view contents of the dataframe ‘Data’ showing the BMI variable added, highlight or type the object name ‘Data’ and click Run (Fig. 7).

# Problem Set

[**\*See the Module 1 portion of the problem set for questions 1 – 5 (Q1-Q5).**]{.underline}

## 6. (6 points) Create new variables in the dataframe Data (or whatever object name you gave the imported \*.csv file): weight and height in English units.

### a. You will be asked to insert an image or screenshot of the dataframe showing they have been added and correctly calculated.

### b. Conversions:

-   Weight: $1 kg = 2.20462 lbs$

-   Height: $39.3701in = 1m$

### c. Coding how-to:

-   `Data$Weight.lbs`: `Data$Weight.kg*2.20462`

-   `Data$Height.in`: `Data$Height.m*39.3701`

## 7. (6 points) Use the `stat.desc()` function to calculate descriptive statistics for `Height.in` and `Weight.lbs` separately for each sample (`Female`, `Male`, `NonBinary`).

### a. You will be asked to insert an image or screenshot of the output from the *RStudio* console window in *Canvas*.

### b. Hint: You will need to use skills from both the Module 1 and Module 2 portions of the problem set to complete this task in *RStudio*.

## 8. (3 points) Look at your *R* scripts from Module 1 and Module 2 portions of this Problem Set. Evaluate how well you did or did not follow best practices for documenting your workflows. Briefly discuss improvements that could be made to the way you document your analysis workflow in future problem sets, if any?

# Optional extra-credit (+3 points possible):

## 9. Create a histogram for each of the following variables in the sample indicated:

-   Female Weight.lbs

-   Male Height.in

-   Non-binary BMI

Compare the histogram to the mean and median of the respective sample calculated using the `stat.desc` function for question 5 above. How, if at all, does the histogram illustrate the relationship of the mean to the median of that sample?

# Submitting your work for the Modules 1 and 2 Problem Set Assignment:

Enter your responses and materials for each item in the corresponding area of the Modules 1 and 2 Problem Set Assignment quiz page. Having the assignment submitted in this way allows me to be much more consistent by grading each question individually across all students in the course before moving on to grading the next question. The Problem Set Assignment quiz must be submitted in *Canvas* on or before the due date provided in the Course Schedule and in *Canvas*.

Questions in *Canvas* may be worded slightly differently than here, usually for brevity, but with the same meaning. If there is a discrepancy in what is being asked between this document and the question form in *Canvas*, answer based on what is asked in this document. Also, please let me know as soon as possible so I can get it fixed.

You will have the opportunity to upload a `doc(x)`, `html`, or `pdf` file at the end of the ‘quiz’ in which you show the steps of your work for the possibility of partial credit. `html` from `RMarkdown` is preferred.
